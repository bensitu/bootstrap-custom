// bootstrap-custom-breakpoints.scss

// Import Bootstrap 4.6.2 variables, mixins
@import "./functions";
@import "./variables";
@import "./mixins";

// Define new breakpoints
$grid-breakpoints: map-merge(
  $grid-breakpoints,
  (
    xxl: 1400px,
    xxxl: 1600px,
    xxxxl: 2000px,
  )
);

// Options: Define the max width of new containers(if needed)
$container-max-widths: map-merge(
  $container-max-widths,
  (
    xxl: 1320px,
    xxxl: 1540px,
    xxxxl: 1800px,
  )
);

// Generate basic container classes
.container,
.container-fluid {
  @include make-container();
}

// Generate responsive container classes
@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints {
      @if ($extend-breakpoint) {
        .container#{breakpoint-infix($name, $grid-breakpoints)} {
          @extend %responsive-container-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}

// Generate grid classes only for new breakpoints
@each $breakpoint in (xxl, xxxl, xxxxl) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint) {
    // Generate column classes
    .row#{$infix} {
      @include make-row();
    }

    // Generate row classes
    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        @include make-col-ready();
        @include make-col($i, $grid-columns);
      }
    }

    // Generate .col-{breakpoint} classes
    .col#{$infix} {
      @include make-col-ready();
      @include make-col-auto();
    }

    // Generate .col-{breakpoint}-auto classes
    .col#{$infix}-auto {
      @include make-col-ready();
      @include make-col-auto();
    }

    // Offset
    @for $i from 0 through ($grid-columns - 1) {
      .offset#{$infix}-#{$i} {
        @include make-col-offset($i, $grid-columns);
      }
    }
  }
}

// Generate some basic utility classes for new breakpoints
// stylelint-disable declaration-no-important
@each $breakpoint in (xxl, xxxl, xxxxl) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint) {
    // Display
    @each $value
      in (
        none,
        inline,
        inline-block,
        block,
        table,
        table-row,
        table-cell,
        flex,
        inline-flex
      )
    {
      .d#{$infix}-#{$value} {
        display: $value !important;
      }
    }

    // Flex
    .flex#{$infix}-row {
      flex-direction: row !important;
    }
    .flex#{$infix}-column {
      flex-direction: column !important;
    }
    .flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }
    .flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }
    .flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }
    .flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }
    .flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    .justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }
    .justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }
    .justify-content#{$infix}-center {
      justify-content: center !important;
    }
    .justify-content#{$infix}-between {
      justify-content: space-between !important;
    }
    .justify-content#{$infix}-around {
      justify-content: space-around !important;
    }
    .align-items#{$infix}-start {
      align-items: flex-start !important;
    }
    .align-items#{$infix}-end {
      align-items: flex-end !important;
    }
    .align-items#{$infix}-center {
      align-items: center !important;
    }
    .align-items#{$infix}-baseline {
      align-items: baseline !important;
    }
    .align-items#{$infix}-stretch {
      align-items: stretch !important;
    }
    .align-content#{$infix}-start {
      align-content: flex-start !important;
    }
    .align-content#{$infix}-end {
      align-content: flex-end !important;
    }
    .align-content#{$infix}-center {
      align-content: center !important;
    }
    .align-content#{$infix}-between {
      align-content: space-between !important;
    }
    .align-content#{$infix}-around {
      align-content: space-around !important;
    }
    .align-content#{$infix}-stretch {
      align-content: stretch !important;
    }
    .align-self#{$infix}-auto {
      align-self: auto !important;
    }
    .align-self#{$infix}-start {
      align-self: flex-start !important;
    }
    .align-self#{$infix}-end {
      align-self: flex-end !important;
    }
    .align-self#{$infix}-center {
      align-self: center !important;
    }
    .align-self#{$infix}-baseline {
      align-self: baseline !important;
    }
    .align-self#{$infix}-stretch {
      align-self: stretch !important;
    }

    // Text alignment
    .text#{$infix}-left {
      text-align: left !important;
    }
    .text#{$infix}-right {
      text-align: right !important;
    }
    .text#{$infix}-center {
      text-align: center !important;
    }

    // Text wrapping and overflow
    .text#{$infix}-wrap {
      white-space: normal !important;
    }
    .text#{$infix}-nowrap {
      white-space: nowrap !important;
    }
    .text#{$infix}-truncate {
      @include text-truncate();
    }

    // Font weight
    .font-weight#{$infix}-light {
      font-weight: $font-weight-light !important;
    }
    .font-weight#{$infix}-lighter {
      font-weight: $font-weight-lighter !important;
    }
    .font-weight#{$infix}-normal {
      font-weight: $font-weight-normal !important;
    }
    .font-weight#{$infix}-bold {
      font-weight: $font-weight-bold !important;
    }
    .font-weight#{$infix}-bolder {
      font-weight: $font-weight-bolder !important;
    }

    // Float
    .float#{$infix}-left {
      float: left !important;
    }
    .float#{$infix}-right {
      float: right !important;
    }
    .float#{$infix}-none {
      float: none !important;
    }

    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $length in $spacers {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
        .#{$abbrev}t#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }
        .#{$abbrev}r#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }
        .#{$abbrev}b#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }
        .#{$abbrev}l#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }
    }

    // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
    @each $size, $length in $spacers {
      @if "#{$size}" != "0" {
        .m#{$infix}-n#{$size} {
          margin: -$length !important;
        }
        .mt#{$infix}-n#{$size},
        .my#{$infix}-n#{$size} {
          margin-top: -$length !important;
        }
        .mr#{$infix}-n#{$size},
        .mx#{$infix}-n#{$size} {
          margin-right: -$length !important;
        }
        .mb#{$infix}-n#{$size},
        .my#{$infix}-n#{$size} {
          margin-bottom: -$length !important;
        }
        .ml#{$infix}-n#{$size},
        .mx#{$infix}-n#{$size} {
          margin-left: -$length !important;
        }
      }
    }

    // Some special margin utils
    .m#{$infix}-auto {
      margin: auto !important;
    }
    .mt#{$infix}-auto,
    .my#{$infix}-auto {
      margin-top: auto !important;
    }
    .mr#{$infix}-auto,
    .mx#{$infix}-auto {
      margin-right: auto !important;
    }
    .mb#{$infix}-auto,
    .my#{$infix}-auto {
      margin-bottom: auto !important;
    }
    .ml#{$infix}-auto,
    .mx#{$infix}-auto {
      margin-left: auto !important;
    }

    // Width and height
    @each $prop, $abbrev in (width: w, height: h) {
      @each $size, $length in $sizes {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
      }
    }

    // Viewport additional helpers
    .min-vw#{$infix}-100 {
      min-width: 100vw !important;
    }
    .min-vh#{$infix}-100 {
      min-height: 100vh !important;
    }
    .vw#{$infix}-100 {
      width: 100vw !important;
    }
    .vh#{$infix}-100 {
      height: 100vh !important;
    }

    // Position
    @each $position in (static, relative, absolute, fixed, sticky) {
      .position#{$infix}-#{$position} {
        position: $position !important;
      }
    }

    // Border
    .border#{$infix} {
      border: $border-width solid $border-color !important;
    }
    .border#{$infix}-0 {
      border: 0 !important;
    }
    @each $position in (top, right, bottom, left) {
      .border-#{$position}#{$infix} {
        border-#{$position}: $border-width solid $border-color !important;
      }
      .border-#{$position}#{$infix}-0 {
        border-#{$position}: 0 !important;
      }
    }

    // Visibility
    .visible#{$infix} {
      visibility: visible !important;
    }
    .invisible#{$infix} {
      visibility: hidden !important;
    }

    // Add other useful classes if needed...
  }
}

// Add responsive hidden classes
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    .d#{$infix}-none {
      display: none !important;
    }
  }
}
// stylelint-enable declaration-no-important
